macro(CONFIGURE_DOXYGEN_FILE DOXYGEN_CONFIG_FILE FILE_NAME_SUFFIX)
 if(EXISTS ${DOXYGEN_CONFIG_FILE})
    file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
    file(READ ${DOXYGEN_CONFIG_FILE} DOXYFILE_CONTENTS)
     string(REGEX REPLACE ";" "\\\\;" DOXYFILE_CONTENTS "${DOXYFILE_CONTENTS}")
     string(REGEX REPLACE "\n" ";" DOXYFILE_LINES "${DOXYFILE_CONTENTS}")
     list(LENGTH DOXYFILE_LINES ROW)
     math(EXPR ROW "${ROW} - 1")
     foreach(I RANGE ${ROW})
        list(GET DOXYFILE_LINES ${I} LINE)
        if(LINE STRGREATER "")
         string(REGEX MATCH "^[a-zA-Z]([^ ])+" DOXY_PARAM ${LINE})
         if(DEFINED DOXY_${DOXY_PARAM})
            string(REGEX REPLACE "=([^\n])+" "= ${DOXY_${DOXY_PARAM}}" LINE ${LINE})
         endif(DEFINED DOXY_${DOXY_PARAM})
        endif()
        file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile "${LINE}\n")
     endforeach()
 else()
    message(SEND_ERROR "Doxygen configuration file '${DOXYGEN_CONFIG_FILE}' not found. Documentation will not be generated")
 endif()
endmacro(CONFIGURE_DOXYGEN_FILE)

macro(ADD_DOCUMENTATION TARGET DOXYGEN_CONFIG_FILE)
 find_package(Doxygen)
 if(DOXYGEN_FOUND)
    configure_doxygen_file(${DOXYGEN_CONFIG_FILE} ${TARGET})
    add_custom_target(${TARGET} # ALL
      COMMAND ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
 else(DOXYGEN_FOUND)
    message(STATUS "Doxygen not found. Documentation will not be generated")
 endif(DOXYGEN_FOUND)
endmacro(ADD_DOCUMENTATION)
